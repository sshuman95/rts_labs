{"version":3,"sources":["components/searches.js","components/results.js","components/tags.js","App.js","redux/action.js","reportWebVitals.js","redux/reducers/search.js","index.js"],"names":["Searches","props","terms","map","term","i","Results","empty","query","data","hits","length","d","title","objectID","story_title","author","created_at","username","about","Tags","tag","onClick","handleTag","type","value","name","App","useState","queryType","setQuery","searchTerm","setSearch","searchTags","setTags","apiData","setApiData","error","setError","pastTerms","useSelector","state","dispatch","useDispatch","className","id","onChange","e","target","placeholder","tempTags","index","indexOf","splice","push","preventDefault","temp","tagsToSend","join","url","payload","fetch","then","res","json","catch","err","console","style","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","intialState","tags","action","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89642e9b.chunk.js","sourcesContent":["const Searches = (props) => {\r\n    return props.terms.map((term,i)=>{\r\n      return <p key={i}>{term}</p>\r\n    })\r\n  }\r\n\r\n  export default Searches;","\r\n\r\nconst Results = (props) =>{\r\n    let empty = <h1>No Results Found</h1>;\r\n        if(props.query === \"search\"){\r\n            return props.data.hits.length <= 0 ? empty : props.data.hits.map(d=>{\r\n                if(d.title){\r\n                  return (\r\n                    <p key={d.objectID}> Title: {d.title}</p>\r\n                  )\r\n                } else {\r\n                 return (\r\n                    <p key={d.objectID}>Title: {d.story_title}</p>\r\n                 )\r\n                }\r\n              })\r\n        } else if(props.query === \"id\"){\r\n            return (\r\n                <div>\r\n                    <p>Author: {props.data.author}</p>\r\n                    <p>Title: {props.data.title}</p>\r\n                    <p>Created at: {props.data.created_at}</p>\r\n                </div>\r\n            )\r\n        } else {\r\n                return (\r\n                    <div>\r\n                        <p>username: {props.data.username}</p>\r\n                        <p>about: {props.data.about}</p>\r\n                        <p>Created at: {props.data.created_at}</p>\r\n                    </div>\r\n                )\r\n        }\r\n    }\r\n\r\n export default Results;","const Tags = (props) => {\r\n    const tags = [\r\n        \"story\",\r\n        \"comment\",\r\n        \"poll\",\r\n        \"pollopt\",\r\n        \"show_hn\",\r\n        \"ask_hn\",\r\n        \"front_page\"\r\n      ];\r\n\r\n   let elems = tags.map((tag,i)=>{\r\n        return (\r\n            <div key={tag}>\r\n                <label>{tag}</label>\r\n                <input onClick={props.handleTag} type=\"checkbox\" value={tag} name={tag}/>\r\n            </div>\r\n        )\r\n   });\r\n\r\n   return (\r\n       elems\r\n   )\r\n};\r\n\r\nexport default Tags;","import { useState } from \"react\";\nimport './App.css';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addTerm, addTag } from \"./redux/action\";\nimport Searches from \"./components/searches\";\nimport Results from \"./components/results\"\nimport Tags from \"./components/tags\";\n\n\n\n\nconst App = () => {\n\n  const [queryType, setQuery] = useState(\"search\");\n  const [searchTerm, setSearch] = useState(\"\");\n  const [searchTags, setTags] = useState([]);\n  const [apiData, setApiData] = useState([]);\n  const [error,setError] = useState(false)\n  const pastTerms = useSelector( state => state.terms )\n  const dispatch = useDispatch();\n\n\n\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  }\n\n  const handleTag = (e) => {\n    let tempTags = searchTags;\n    let index = tempTags.indexOf(e.target.value);\n    if( index > -1 ){\n        tempTags.splice(index,1)\n    } else {\n      tempTags.push(e.target.value);\n    }\n\n    setTags(tempTags);\n  }\n\n  const handleQueryChange = (e) => {\n    setQuery(e.target.value);\n    setApiData([]);\n    setError(false)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if(searchTerm || searchTags.length > 0){\n        let temp = searchTerm;\n        let tagsToSend = searchTags.join();\n        let url = ``;\n        switch(queryType){\n          case \"search\":\n            url = `search?query=${searchTerm}&tags=${tagsToSend}`\n            break;\n          case \"id\":\n            url = `items/${searchTerm}`;\n            tagsToSend = \"id\";\n            break;\n          case \"username\":\n            url = `users/${searchTerm}`;\n            tagsToSend = \"username\";\n            break;\n          default:\n            return;\n        }\n        dispatch(addTerm(temp));\n        dispatch(addTag(tagsToSend));\n        fetch(\"https://hn.algolia.com/api/v1/\"+url)\n        .then(res=>{\n          return res.json()\n        })\n        .then(json=>{\n          setApiData(json);\n          setError(false);\n        })\n        .catch(err=>{\n          console.error(err);\n          setError(true);\n        })\n    }\n  }\n\n\n\n  return (\n    <div className=\"App\">\n        <h1>Hacker News Algolia API</h1>\n        <form>\n        <select id=\"queries\" name=\"queriesForm\" onChange={handleQueryChange}>\n          <option value=\"search\">Search by Term (text)</option>\n          <option value=\"id\">Search by ID (numeric)</option>\n          <option value=\"username\">Search by Username (text)</option>\n        </select>\n        </form>\n        <form>\n            <input onChange={handleChange} type=\"text\" placeholder=\"Search Term\"/>\n            {queryType === \"search\" ? \n            <div>\n             <p>Select a tag(s) to filter your search</p>\n            <Tags handleTag={handleTag}/> \n            </div>\n            : \"\"}\n            <input type=\"submit\" onClick={handleSubmit}/>\n        </form>\n        {error?<h2 style={{color:'red'}}>Failed to Fetch. Please try with a different Query</h2>:\"\"}\n        <section className=\"searchResults\">\n          <div className=\"resultsContainer\">\n            <h1>Results</h1>\n            {apiData.length <= 0 ? <p>Please enter a search term</p> : <Results query={queryType} data={apiData}/>}\n          </div> \n          <div>\n            <h1>Your past seach terms</h1>\n            {pastTerms.length <= 0 ? <p>No Searches Recorded</p> : <Searches terms={pastTerms}/>}\n          </div> \n        </section>\n    </div>\n  );\n}\n\nexport default App;\n","export const addTerm = (term) => {\r\n    return {\r\n      type: \"ADD_TERM\",\r\n      payload:term\r\n    }\r\n  }\r\n\r\n\r\nexport const addTag = (tags) => {\r\n    return {\r\n      type: \"ADD_TAG\",\r\n      payload:tags\r\n    }\r\n  }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const intialState = {\r\n    terms:[],\r\n    tags:[]\r\n}\r\n\r\n\r\n\r\nconst terms = (state = intialState, action) => {\r\n    switch(action.type){\r\n      case \"ADD_TERM\":\r\n        return {\r\n            ...state,\r\n            terms:[...state.terms, action.payload]\r\n        }\r\n      case \"ADD_TAG\":\r\n          return {\r\n              ...state,\r\n              tags:[...state.tags, action.payload]\r\n        }\r\n      default:\r\n        return state;\r\n  }\r\n}\r\n\r\nexport default terms;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from \"redux\";\nimport { Provider } from 'react-redux';\nimport terms from \"./redux/reducers/search\";\n\n\nlet store = createStore(terms,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}